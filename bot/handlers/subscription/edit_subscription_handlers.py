from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.database.database import db
from bot.filters.subscription import IsUserSubscribed
from bot.keyboards.user_keyboards import get_weather_forecast_type_kb, get_edit_sub_menu_inline_kb, get_cancel_sub_kb
from bot.handlers.weather.weather_functions import get_rules, is_valid_time, format_time
from bot.middlewares.timezone import HasTimezoneMessageMiddleware, HasTimezoneCallbackMiddleware


router = Router()
router.message(IsUserSubscribed())
router.message.middleware(HasTimezoneMessageMiddleware())
router.message.middleware(HasTimezoneCallbackMiddleware())


class EditSubscription(StatesGroup):
    edit_city = State()
    edit_time = State()
    cancel = State()


@router.message(Command("edit_sub"))
async def edit_subscription_command(message: types.Message):
    await message.answer(
        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.",
        reply_markup=get_edit_sub_menu_inline_kb()
    )


@router.callback_query(F.data == "sub_edit_city")
async def sub_edit_choose_type_city_data(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.",
                                  reply_markup=get_weather_forecast_type_kb()
                                  )
    await callback.answer()
    await state.set_state(EditSubscription.edit_city)


@router.message(F.location, EditSubscription.edit_city)
async def sub_edit_city_data_by_location(message: types.Message, state: FSMContext):
    await db.set_sub_city_data(user_id=message.from_user.id,
                               city_data=f"{message.location.latitude}, {message.location.longitude}"
                               )
    await message.answer(text="–î–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.‚úÖ")
    await state.clear()


@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é", EditSubscription.edit_city)
async def sub_edit_city_name_rules(message: types.Message):
    await message.answer(text=get_rules())


@router.message(F.text, EditSubscription.edit_city)
async def sub_edit_city_data_by_text(message: types.Message, state: FSMContext):
    await db.set_sub_city_data(user_id=message.from_user.id, city_data=message.text)
    await message.answer(text="–î–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.‚úÖ")
    await state.clear()


@router.callback_query(F.data == "sub_edit_time")
async def sub_edit_time_rules(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã (–ø—Ä–∏–º. 12:00, 14.30 –∏–ª–∏ 21 46)."
    )
    await callback.answer()
    await state.set_state(EditSubscription.edit_time)


@router.message(F.text, EditSubscription.edit_time)
async def sub_edit_time(message: types.Message, state: FSMContext):
    if is_valid_time(message.text):
        await db.set_sub_forecast_time(user_id=message.from_user.id, time=format_time(message.text))
        await message.answer(text="–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã.‚úÖ",
                             reply_markup=types.ReplyKeyboardRemove()
                             )
        await state.clear()
    else:
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.\n–ß–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–¥–µ–ª—è—Ç—å—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ–º(:), —Ç–æ—á–∫–æ–π(.) –∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–º.")


@router.callback_query(F.data == "sub_cancel")
async def sub_edit_cancel_ask_if_user_sure(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?üò®\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥!ü•∫",
        reply_markup=get_cancel_sub_kb()
    )
    await callback.answer()
    await state.set_state(EditSubscription.cancel)


@router.message(F.text, EditSubscription.cancel)
async def sub_cancel(message: types.Message, state: FSMContext):
    if message.text.lower().startswith("–¥–∞"):
        await db.cancel_subscription(user_id=message.from_user.id)
        await message.answer(text="–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã.",
                             reply_markup=types.ReplyKeyboardRemove()
                             )
    else:
        await message.answer(text="üòò", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
