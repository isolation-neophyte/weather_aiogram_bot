from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.database.database import db
from bot.filters.subscription import IsUserNotSubscribed
from bot.middlewares.timezone import HasTimezoneMessageMiddleware, HasTimezoneCallbackMiddleware
from bot.keyboards.user_keyboards import get_weather_forecast_type_kb
from bot.handlers.weather.weather_functions import get_rules, get_timezone, is_valid_time, format_time

router = Router()
router.message.middleware(HasTimezoneMessageMiddleware())
router.message.middleware(HasTimezoneCallbackMiddleware())


class Subscription(StatesGroup):
    city_data_type = State()
    city_data = State()
    time = State()


@router.message(Command("edit_sub"), IsUserNotSubscribed())
async def edit_subscription_command_redirect(message: types.Message):
    await message.answer(
        text="–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã.üò∞ –ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/subscribe</b>",
        parse_mode="HTML"
    )


@router.message(Command("subscribe"))
async def subscribe_command(message: types.Message, state: FSMContext):
    if not await db.is_user_subscribed(message.from_user.id):
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.",
            reply_markup=get_weather_forecast_type_kb()
            )
        await state.set_state(Subscription.city_data_type)
    else:
        await message.answer(
            text="–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã! –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/edit_sub</b>",
            parse_mode="HTML"
        )


@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é", Subscription.city_data_type)
async def subscription_send_city_title_rules(message: types.Message, state: FSMContext):
    await message.answer(text=get_rules(), reply_markup=types.ReplyKeyboardRemove())

    await state.set_state(Subscription.city_data)


@router.message(F.location, Subscription.city_data_type)
async def create_subscription_by_location(message: types.Message, state: FSMContext):
    await state.update_data(city_data=f"{message.location.latitude}, {message.location.longitude}")

    await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã (–ø—Ä–∏–º. 12:00, 14.30 –∏–ª–∏ 21 46).\n‚ùóÔ∏è–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å, –Ω–æ —É –≤–∞—Å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    await state.set_state(Subscription.time)


@router.message(F.text, Subscription.city_data)
async def create_subscription_by_title(message: types.Message, state: FSMContext):
    if get_timezone(message.text):
        await state.update_data(city_data=message.text)

        await message.answer(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã (–ø—Ä–∏–º. 12:00, 14.30 –∏–ª–∏ 21 46).\n‚ùóÔ∏è–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å, –Ω–æ —É –≤–∞—Å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

        await state.set_state(Subscription.time)
    else:
        await message.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")


@router.message(F.text, Subscription.time)
async def create_subscription(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    if is_valid_time(message.text):
        await db.create_subscription(sub_city_data=user_data["city_data"],
                                     sub_forecast_time=format_time(message.text),
                                     user_id=message.from_user.id
                                     )

        await message.answer(text="–£—Ä–∞!üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.‚úÖ \n–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /edit_sub")
        await state.clear()
    else:
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.\n–ß–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–¥–µ–ª—è—Ç—å—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ–º(:), —Ç–æ—á–∫–æ–π(.) –∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–º.")
