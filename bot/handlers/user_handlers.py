from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.database.database import db
from bot.handlers.weather.weather_handlers import Weather
from bot.keyboards.user_keyboards import get_weather_forecast_type_kb
from bot.handlers.weather.weather_functions import get_description, get_help_command_text, get_timezone, get_rules

router = Router()


class TimezoneEdit(StatesGroup):
    city_name = State()


@router.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    await message.answer(text=get_description())
    if not await db.is_user_exists(message.from_user.id):
        await message.answer(text="–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ.üïê –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.‚úçÔ∏è")
        await state.set_state(TimezoneEdit.city_name)
    else:
        await message.answer(text='–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.üåçüòä\n\n–ï—Å–ª–∏ –≤–∞—Å –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/cancel</b>.\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/help</b>.üíï',
                             reply_markup=get_weather_forecast_type_kb(),
                             parse_mode="HTML"
                             )
        await state.set_state(Weather.forecast_type)


@router.message(Command(commands=["cancel"]))
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_command(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/help</b>.",
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode="HTML"
    )


@router.message(Command("help"))
@router.message(F.text.lower() == "–ø–æ–º–æ—â—å")
async def help_command(message: types.Message):
    await message.answer(text=get_help_command_text(), reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")


@router.message(Command("set_timezone"))
async def set_timezone_command(message: types.Message, state: FSMContext):
    await message.answer(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.‚úçÔ∏è",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(TimezoneEdit.city_name)


@router.message(F.text, TimezoneEdit.city_name)
async def edit_timezone(message: types.Message, state: FSMContext):
    timezone = get_timezone(message.text)

    if timezone:
        if not await db.is_user_exists(user_id=message.from_user.id):
            await db.create_user(user_id=message.from_user.id)

        await db.set_timezone(user_id=message.from_user.id, timezone=timezone)

        await message.answer(
            text=f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {timezone}. –°–ø–∞—Å–∏–±–æ!\n\n<em>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/weather</b>. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ <b>/help</b></em>.üòä",
            parse_mode="HTML"
            )
        await state.clear()
    else:
        await message.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.\n–¢–∞–∫–∂–µ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞:")
        await message.answer(text=get_rules())
