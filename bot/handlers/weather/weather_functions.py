import os
import requests
import re
import pytz

from datetime import datetime
from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder


def is_valid_time(time):
    time_pattern = r'^\d{1,2}[:. ]\d{2}$'

    if re.match(time_pattern, time):
        parts = re.split(r'[:. ]', time)
        hours, minutes = int(parts[0]), int(parts[1])
        if 0 <= hours <= 23 and 0 <= minutes <= 59:
            return True
    return False


def format_time(time):
    parts = re.split(r'[:. ]', time)
    return f"{parts[0]}:{parts[1]}"


def get_timezone(city_name: str):
    geolocator = Nominatim(user_agent="weather_isneo_bot")
    location = geolocator.geocode(city_name)

    if location:
        tf = TimezoneFinder()
        timezone_str = tf.timezone_at(lng=location.longitude, lat=location.latitude)
        return timezone_str
    else:
        return None


def get_timezone_time(timezone_str):
    tz = pytz.timezone(timezone_str)
    current_time = datetime.now(tz=tz)
    date_str = current_time.strftime("%Y-%m-%d")
    time_str = current_time.strftime("%H:%M:%S")
    return {"date": date_str, "time": time_str}


def get_today_forecast(city_data, timezone):
    current_time = datetime.now(tz=pytz.timezone(timezone))

    base_url = "https://api.openweathermap.org/data/2.5/"
    api_key = os.getenv("OPEN_WEATHER_TOKEN")

    if isinstance(city_data, list):
        lat, lon = city_data
        url_current = f"{base_url}weather?lat={lat}&lon={lon}&appid={api_key}&units=metric&lang=ru"
        url_forecast = f"{base_url}forecast?lat={lat}&lon={lon}&appid={api_key}&units=metric&lang=ru"
    else:
        url_current = f"{base_url}weather?q={city_data}&appid={api_key}&units=metric&lang=ru"
        url_forecast = f"{base_url}forecast?q={city_data}&appid={api_key}&units=metric&lang=ru"

    current_weather_data = requests.get(url_current).json()
    forecast_weather_data = requests.get(url_forecast).json()

    forecast_result = f"""<b>–°–µ–π—á–∞—Å</b> –≤ –≥–æ—Ä–æ–¥–µ {current_weather_data['name']}:
        {current_weather_data['weather'][0]['description'].capitalize()}{get_condition_emoji(current_weather_data['weather'][0]['id'])}, {round(current_weather_data['main']['temp'])}¬∞C. 
        –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(current_weather_data['main']['feels_like'])}¬∞C.\n\n<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"""

    for forecast in forecast_weather_data["list"]:
        weather_date = forecast["dt_txt"].split(" ")[0]
        if current_time.date() == datetime.strptime(weather_date, '%Y-%m-%d').date():
            forecast_result += f"–í {forecast['dt_txt'].split(' ')[1][:5]} –æ–∂–∏–¥–∞–µ—Ç—Å—è {'{0:+3.0f}'.format(forecast['main']['temp'])}, {forecast['weather'][0]['description']}{get_condition_emoji(forecast['weather'][0]['id'])}\n"

    return forecast_result


def get_4_days_forecast(city_data, timezone):
    current_time = datetime.now(tz=pytz.timezone(timezone))

    base_url = "https://api.openweathermap.org/data/2.5/"
    api_key = os.getenv("OPEN_WEATHER_TOKEN")

    if isinstance(city_data, list):
        lat, lon = city_data
        url_forecast = f"{base_url}forecast?lat={lat}&lon={lon}&appid={api_key}&units=metric&lang=ru"
    else:
        url_forecast = f"{base_url}forecast?q={city_data}&appid={api_key}&units=metric&lang=ru"

    forecast_user_data = requests.get(url_forecast).json()

    forecast_result = "\n\n<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 4 –¥–Ω—è:</b>\n\n"

    for forecast in forecast_user_data["list"]:
        weather_date = forecast["dt_txt"].split(" ")[0]
        weather_time = forecast["dt_txt"].split(" ")[1]
        if current_time.date() != datetime.strptime(weather_date, '%Y-%m-%d').date() and weather_time == "15:00:00":
            forecast_result += f"{forecast['dt_txt'].split(' ')[0]} –æ–∂–∏–¥–∞–µ—Ç—Å—è {'{0:+3.0f}'.format(forecast['main']['temp_min'])}, {forecast['weather'][0]['description']}{get_condition_emoji(forecast['weather'][0]['id'])}\n"

    return forecast_result


def get_condition_emoji(weather_id):
    emojis = {"2": "üå©", "3": "üå®", "5": "üå®", "6": "‚ùÑÔ∏è", "7": "üå´"}
    emojis_exceptions = {800: "‚òÄÔ∏è", 801: "üå§", 802: "üå•", 803: "‚õÖÔ∏è", 804: "‚òÅÔ∏è"}

    if weather_id in (800, 801, 802, 803, 804,):
        return emojis_exceptions[weather_id]
    return emojis[str(weather_id)[0]]


def get_description():
    return """üå¶Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üå¶Ô∏è

–° –ü–æ–≥–æ–¥–∞ –±–æ—Ç–æ–º –≤—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–≥–æ–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π. –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏ –≤—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–∑–Ω–∞–µ—Ç–µ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.

2Ô∏è‚É£ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.

üïê –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã. –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –≥–æ—Ä–æ–¥ (–µ–≥–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å) –∏ —É–¥–æ–±–Ω–æ–µ –¥–ª—è —Å–µ–±—è –≤—Ä–µ–º—è, –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑.

üåûüåßÔ∏è‚ùÑÔ∏è"""


def get_rules():
    return """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –°–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç—É –≤–µ—Ä–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –≥–æ—Ä–æ–¥:

1. –°–æ–±–ª—é–¥–∞–π—Ç–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–∏—à–∏—Ç–µ –±–µ–∑ –æ—à–∏–±–æ–∫.

2. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ–≤–∞–∂–µ–Ω).

3. –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –µ—Å—Ç—å –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º. "–ö—É–∞–ª–∞-–õ—É–º–ø—É—Ä"), —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å."""


def get_help_command_text():
    return """–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.

–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

<b>/weather</b> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º –≤–∞—Å –≥–æ—Ä–æ–¥–µ.üåû
<b>/subscribe</b> - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–≥–æ–¥—ã.üíåüåç
<b>/edit_sub</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π.üìù
<b>/set_timezone</b> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.üïê
<b>/cancel</b> - –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è (–º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –µ—Å–ª–∏ –≤—ã, –∫ –ø—Ä–∏–º–µ—Ä—É, –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ª—É—á—à–∏–π –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ–ºüíÖ)"""
